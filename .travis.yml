#this file is mostly copied from https://docs.travis-ci.com/user/languages/python/
#it contains the information for automated testing on Github

#this is a python project, designed to be compatible with 3.6+
language: python

# cache pip
cache:
  directories:
    - $HOME/.cache/pip #linux
    - $HOME/Library/Caches/pip #macosx
    - $HOME/AppData/Local/pip/Cache #windows
    - $HOME/upx #upx

#default VM settings
dist: bionic
python: "3.7"
env:
  global:
    - PYTHON_EXECUTABLE="python"
    - UPX_VERSION="3.95"

# cache
# before_install
# install
### jobs ###
# before_script
# script
# before_cache
# after_success
# before_deploy
# deploy
# after_deploy

# upgrade pip
# install pillow, numpy for app
# install pyinstaller for distilling
install:
  - ${PYTHON_EXECUTABLE} --version
  - "if [ \"${TRAVIS_OS_NAME}\" == \"windows\" ]; then \
      pip --version; \
      pip install -r \"./app_resources/meta/manifests/pip_requirements.txt\"; \
    else \
 	    pip3 --version; \
	    pip3 install -U wheel; \
      pip3 install -r \"./app_resources/meta/manifests/pip_requirements.txt\"; \
    fi"
  - export DEPLOY=yes

jobs:
  include:
    # 3.7 on Bionic Test
    - &tests
      stage: "Unit Tests"
      name: "Python 3.7 on Ubuntu Bionic: Test"
      dist: bionic
      python: "3.7"
      services: xvfb
      before_script: echo "#do nothing before script"
      script: ${PYTHON_EXECUTABLE} tests.py

    # 3.7 on Bionic Build/Deploy
    - &build-deploy
      stage: "Build & Deploy Binaries"
      name: "3.7 on Bionic: Build/Deploy"
      dist: bionic
      python: "3.7"
      services: xvfb
      skip_cleanup: true
      script:
        #run upx script
        # upx still doesn't quite work with race conditions of downloading vs processing
        # try to beat the race condition by having all this in one line
        #run build script
        #list files to see what was built
        - "if [ true ]; then \
            if [ \"${TRAVIS_DIST}\" != \"xenial\" ]; then \
              bash ./scripts/get_upx.sh; \
            fi; \
            ${PYTHON_EXECUTABLE} build.py; \
            ls; \
          fi"
      after_success:
        #if no tag was submitted, let's build one
        #current: default to build number (a 3-digit number at this time above 150)
        #future:  <major>.<minor>.<build_number>,
        # to be read from a text file that's in the repo with the intended <major>.<minor> version numbers
        # FIXME: Do that
        - "if [ \"${TRAVIS_TAG}\" == \"\" ]; then \
            export TRAVIS_TAG=\"${TRAVIS_BUILD_NUMBER}\"; \
          fi"
        #prepare files to upload
        - bash ./scripts/after_success.sh
        #list binaries
        - ls -p | grep -E '^(.\/)?([[:alnum:]-])*(.exe|$)'
        #save list
        - export FILES_TO_UPLOAD=$(ls -p | grep -E '^(.\/)?([[:alnum:]-])*(.exe|$)')
        #output final deployment info
        - "echo \"Deploy: ${DEPLOY}\""
        - "echo \"Files to Upload: ${FILES_TO_UPLOAD}\""
        - "echo \"Git tag: ${TRAVIS_TAG}\""

      deploy:
        provider: releases
        api_key:
          secure: $GITHUB_DEPLOY_KEY
        file_glob: true
        file: $FILES_TO_UPLOAD
        skip_cleanup: true
        on:
          repo: Artheau/SpriteSomething
          condition: $DEPLOY == "yes"
          branch: master
          draft: true

    # 3.7 on Xenial
    - <<: *tests
      name: "Python 3.7 on Ubuntu Xenial: Test"
      dist: xenial
      python: "3.7"
      services: xvfb
    - <<: *build-deploy
      name: "3.7 on Xenial: Build/No Deploy"
      dist: xenial
      python: "3.7"
      services: xvfb
      before_script:
        - "export DEPLOY=no"
        - "echo \"Deploy: ${DEPLOY}\""

    # 3.6 on Xenial
    - <<: *tests
      name: "Python 3.6 on Ubuntu Xenial: Test"
      dist: xenial
      python: "3.6"
      services: xvfb
    - <<: *build-deploy
      name: "3.6 on Xenial: Build/No Deploy"
      dist: xenial
      python: "3.6"
      services: xvfb
      before_script:
        - "export DEPLOY=no"
        - "echo \"Deploy: ${DEPLOY}\""

    # 3.7 on macOS
    - <<: *tests
      name: "Python 3.7 on MacOSX 10.14 xcode 10.2: Test"
      os: osx
      osx_image: xcode10.2
      python: "3.7"
      services:
      language: shell
      before_install: export PYTHON_EXECUTABLE=python3
    - <<: *build-deploy
      name: "3.7 on MacOSX: Build/Deploy"
      os: osx
      osx_image: xcode10.2
      python: "3.7"
      services:
      language: shell
      before_install: export PYTHON_EXECUTABLE=python3

    # 3.7 on Windows
    - <<: *tests
      name: "Python 3.7 on Windows 10 v1803: Test"
      os: windows
      python: "3.7"
      services: xvfb
      language: shell
      before_install:
        - choco install python
        - export PATH=/c/Python37:/c/Python37/Scripts:$PATH
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - ${PYTHON_EXECUTABLE} get-pip.py
        - ${PYTHON_EXECUTABLE} -m pip install --upgrade pip
        - bash ./scripts/win-before_install.sh
    - <<: *build-deploy
      name: "3.7 on Windows: Build/Deploy"
      os: windows
      python: "3.7"
      services: xvfb
      language: shell
      before_install:
        - choco install python
        - export PATH=/c/Python37:/c/Python37/Scripts:$PATH
        - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        - ${PYTHON_EXECUTABLE} get-pip.py
        - ${PYTHON_EXECUTABLE} -m pip install --upgrade pip
        - bash ./scripts/win-before_install.sh

notifications:
  email: false
