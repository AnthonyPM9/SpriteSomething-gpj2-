# workflow name
name: Test, Build, Deploy Release, Deploy Pages

# fire on
on: [ push, pull_request ]

########################
# Non-GitHub providers #
########################
# deploy-release: docker://softprops/action-gh-release
# deploy-pages:   peaceiris/actions-gh-pages@v1.1.0

# What I *should* be able to do:
#  Define Install Job
#   Checkout commit
#   Halt if fail
#  Define Tests Job
#   Calls Install Job
#   Run tests.py
#   Halt if fail
#  Define Build Job
#   Calls Install Job
#   Run build.py
#   Halt if fail
#  Define Prepare-Release Job
#   Calls Install Job
#   Prepare workspace for release files
#   Halt if fail
#  Define Deploy Release Job
#   Calls Prepare Release Job
#   Deploys release files
#   Halt if fail
#  Define Prepare-Pages Job
#   Calls Install Job
#   Calls Prepare Release Job
#   Prepare workspace for releasing pages files
#   Halt if fail
#  Define Deploy Pages Job
#   Calls Install Job
#   Deploys pages files
#   Halt if fail

# stuff to do
jobs:
  # Install & Build
  #  Set up environment
  # Build
  #  Run build.py
  install-build:
    name: Install/Build
    # cycle through os list
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        os-name: [ ubuntu-latest ] # [ ubuntu-latest, ubuntu-16.04, macOS-latest, windows-latest ]
        python-version: [ 3.7 ]
#    needs: [ install-test ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # install python
    - name: Install Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: "x64"
    - run: |
        python --version
    # install dependencies via pip
    - name: Install Dependencies via pip
      run: |
        python -m pip install --upgrade pip
        pip --version
        pip install -r app_resources/meta/manifests/pip_requirements.txt
    # run build.py
    - name: Build Binary
      run: |
        python build.py

  # Install & Preparing Release
  #  Set up environment
  # Local Prepare Release action
  install-prepare-release:
    name: Install/Prepare Release
    # cycle through os list
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        os-name: [ ubuntu-latest ] # [ ubuntu-latest, ubuntu-16.04, macOS-latest, windows-latest ]
        python-version: [ 3.7 ]

    needs: [ install-build ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # install python
    - name: Install Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: "x64"
    - run: |
        python --version
    # install dependencies via pip
    - name: Install Dependencies via pip
      run: |
        python -m pip install --upgrade pip
        pip --version
        pip install -r app_resources/meta/manifests/pip_requirements.txt
        pip install regex
    # Prepare Release
    - name: Local Prepare GitHub Release Action
#      uses: ./.github/actions/prepare-release
      shell: bash
      run: |
        cp ./.github/actions/prepare-release/entrypoint.sh ./prepare-release.sh
        chmod +x ./prepare-release.sh
        export OS_NAME=${{ matrix.os-name }}
        ./prepare-release.sh

  # Deploy to GitHub Releases
  #  Release Name:  SpriteSomethin v${GITHUB_TAG}
  #  Release Body:  Inline content of RELEASENOTES.md
  #  Release Body:  Fallback to URL to RELEASENOTES.md
  #  Release Files: ${FILES}
#  deploy-release:
#    name: Deploy to GitHub Releases
#    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
#    strategy:
#      matrix:
        # don't build on python 3.6 or xenial
#        os-name: [ ubuntu-latest, ubuntu-16.04, macOS-latest, windows-latest ]
#        python-version: [ 3.7 ]
#        exclude:
#          - os-name: ubuntu-16.04

#    needs: [ prepare-release ]
#    steps:
#    - name: Create a Release
#      uses: docker://softprops/action-gh-release
#      with:
#        name: ${RELEASE_NAME}
#        draft: true
#        body: "Please see [RELEASENOTES.md](https://github.com/${GITHUB_REPOSITORY}/blog/${GITHUB_TAG}/RELEASENOTES.md) for description."
#        body_path: ${GITHUB_WORKSPACE}/RELEASENOTES.md
#        files: ${FILES}
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Prepare for Deployment to GitHub Pages
  #  run custom action
#  prepare-pages:
#    name: Prepare for GitHub Pages
#    runs-on: windows-latest
#    python-version: "3.7"
#    needs: [ deploy-release ]
#    steps:
#    - name: Local Prepare GitHub Pages Action
#      uses: ./.github/actions/prepare-pages

  # Deploy to GitHub Pages
  #
#  deploy-pages:
#    name: Deploy to GitHub Pages
#    runs-on: windows-latest
#    python-version: "3.7"
#    needs: [ prepare-pages ]
#    steps:
#      - name: Post to GitHub Pages
#        uses: peaceiris/actions-gh-pages@v1.1.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          PUBLISH_BRANCH: gh-pages
#          PUBLISH_DIR: ${PAGES}
