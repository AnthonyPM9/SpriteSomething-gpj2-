# workflow name
name: Test, Build, Deploy Release, Deploy Pages

# fire on
on: [ push, pull_request ]

########################
# Non-GitHub providers #
########################
# deploy-release: docker://softprops/action-gh-release
# deploy-pages:   peaceiris/actions-gh-pages@v1.1.0

# What I *should* be able to do:
#  Define Install Job
#   Checkout commit
#   Halt if fail
#  Define Tests Job
#   Calls Install Job
#   Run tests.py
#   Halt if fail
#  Define Build Job
#   Calls Install Job
#   Run build.py
#   Halt if fail
#  Define Prepare-Release Job
#   Calls Install Job
#   Prepare workspace for release files
#   Halt if fail
#  Define Deploy Release Job
#   Calls Prepare Release Job
#   Deploys release files
#   Halt if fail
#  Define Prepare-Pages Job
#   Calls Install Job
#   Calls Prepare Release Job
#   Prepare workspace for releasing pages files
#   Halt if fail
#  Define Deploy Pages Job
#   Calls Install Job
#   Deploys pages files
#   Halt if fail

# stuff to do
jobs:
  # Install & Test
  #  Set up environment
  # Test
  #  Run tests/tests.py
  install-test:
    name: Install/Test
    # cycle through os list
    runs-on: ${{ matrix.os-name }}
    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # test on not windows since it can't test tkinter
        os-name: [ ubuntu-latest, ubuntu-16.04, macOS-latest ]
        python-version: [ 3.7 ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # install python for ubuntu
    - name: Install Python with tkinter for Ubuntu
      run: |
        sudo apt-get update
        sudo apt-get install software-properties-common
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt-get update
        sudo apt-get install tk-dev python3-tk python3 python3.7 python-pip python3-pip python3-pytest
        sudo rm /usr/bin/python
        sudo ln -s /usr/bin/python3.7 /usr/bin/python
        sudo apt-get install xvfb
        python3 --version
      if: contains(matrix.os-name, 'ubuntu')
    # install python for macos
    - name: Install Python with tkinter for MacOS
      run: |
        brew install tcl-tk
        brew uninstall python
        brew install python --with-tcl-tk
        python3 --version
      if: contains(matrix.os-name, 'macos')
    # install dependencies via pip
    - name: Install Dependencies via pip
      env:
        OS_NAME: ${{ matrix.os-name }}
      run: |
        python3 ./resources/ci/common/install.py
        pip install pytest pytest-cov
    - name: Start virtual display driver
      run: |
        disp=:99
        screen=0
        geom=640x480x24
        exec Xvfb $disp -screen $screen $geom 2>/tmp/Xvfb.log &
        export DISPLAY=:99
    - name: Run Tests
      run: |
        python3 tests/tests.py
  # Install & Build
  #  Set up environment
  # Build
  #  Run build.py
  install-build:
    name: Install/Build
    # cycle through os list
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        os-name: [ ubuntu-latest, ubuntu-16.04, macOS-latest, windows-latest ]
        python-version: [ 3.7 ]
    needs: [ install-test ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # install python
    - name: Install python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: "x64"
    - run: |
        python --version
    # install dependencies via pip
    - name: Install Dependencies via pip
      env:
        OS_NAME: ${{ matrix.os-name }}
      run: |
        python ./resources/ci/common/install.py
    # try to get UPX
    - name: Get UPX
      env:
        OS_NAME: ${{ matrix.os-name }}
      run: |
        python ./resources/ci/common/get_upx.py
    # run build.py
    - name: Build Binary
      run: |
        python ./source/meta/build.py
    # prepare binary artifact for later step
    - name: Prepare Binary Artifact
      env:
        OS_NAME: ${{ matrix.os-name }}
      run: |
        python ./resources/ci/common/prepare_binary.py
    # upload binary artifact for later step
    - name: Upload Binary Artifact
      uses: actions/upload-artifact@v1
      with:
        name: binary-${{ matrix.os-name }}
        path: ../artifact

  # Install & Preparing Release
  #  Set up environment
  # Local Prepare Release action
  install-prepare-release:
    name: Install/Prepare Release
    # cycle through os list
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # install/release on not xenial
        os-name: [ ubuntu-latest, macOS-latest, windows-latest ]
        python-version: [ 3.7 ]

    needs: [ install-build ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # install python
    - name: Install Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: "x64"
    - run: |
        python --version
    # install dependencies via pip
    - name: Install Dependencies via pip
      env:
        OS_NAME: ${{ matrix.os-name }}
      run: |
        python ./resources/ci/common/install.py
    # download binary artifact
    - name: Download Binary Artifact
      uses: actions/download-artifact@v1
      with:
        name: binary-${{ matrix.os-name }}
        path: ./
    # Prepare AppVersion & Release
    - name: Prepare AppVersion & Release
      env:
        OS_NAME: ${{ matrix.os-name }}
      run: |
        python ./resources/ci/common/prepare_appversion.py
        python ./resources/ci/common/prepare_release.py
    # upload appversion artifact for later step
    - name: Upload AppVersion Artifact
      uses: actions/upload-artifact@v1
      with:
        name: appversion-${{ matrix.os-name }}
        path: ./resources/app/meta/manifests/app_version.txt
    # upload archive artifact for later step
    - name: Upload Archive Artifact
      uses: actions/upload-artifact@v1
      with:
        name: archive-${{ matrix.os-name }}
        path: ../deploy

  # Deploy to GitHub Releases
  #  Release Name:  SpriteSomething v${GITHUB_TAG}
  #  Release Body:  Inline content of RELEASENOTES.md
  #  Release Body:  Fallback to URL to RELEASENOTES.md
  #  Release Files: ../deploy
  deploy-release:
    name: Deploy GHReleases
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # release only on bionic
        os-name: [ ubuntu-latest ]
        python-version: [ 3.7 ]

    needs: [ install-prepare-release ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    - name: Install Dependencies via pip
      run: |
        python -m pip install pytz requests
    # download appversion artifact
    - name: Download AppVersion Artifact
      uses: actions/download-artifact@v1
      with:
        name: appversion-${{ matrix.os-name }}
        path: ../build
    # download ubuntu archive artifact
    - name: Download Ubuntu Archive Artifact
      uses: actions/download-artifact@v1
      with:
        name: archive-ubuntu-latest
        path: ../deploy/linux
    # download macos archive artifact
    - name: Download MacOS Archive Artifact
      uses: actions/download-artifact@v1
      with:
        name: archive-macOS-latest
        path: ../deploy/macOS
    # download windows archive artifact
    - name: Download Windows Archive Artifact
      uses: actions/download-artifact@v1
      with:
        name: archive-windows-latest
        path: ../deploy/windows
    # debug info
    - name: Debug Info
      shell: bash
#        git tag ${GITHUB_TAG}
#        git push origin ${GITHUB_TAG}
      run: |
        GITHUB_TAG=$(head -n 1 "../build/app_version.txt")
        GITHUB_TAG="v${GITHUB_TAG}"
        RELEASE_NAME="SpriteSomething ${GITHUB_TAG}"
        echo "Release Name: ${RELEASE_NAME}"
        echo "Git Tag:      ${GITHUB_TAG}"
    # npm is missing some stuff #FIXME
    - name: Install Dependencies via npm
      shell: bash
      run: |
        npm install --save @actions/core @actions/github glob mime
    # read releasenotes
    - name: Read RELEASENOTES
      id: releasenotes
      run: |
        echo "::set-output name=body::$(cat ${GITHUB_WORKSPACE}/RELEASENOTES.md)"
    # create a release
    - name: Create a Release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${GITHUB_TAG}
        release_name: SpriteSomething ${GITHUB_TAG}
        body: ${{ steps.releasenotes.outputs.body }}
        draft: true
    # upload linux archive asset
    - name: Upload Linux Archive Asset
      id: upload-linux-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ../deploy/linux/SpriteSomething.tar.gz
        asset_name: SpriteSomething-${GITHUB_TAG}-linux-bionic.tar.gz
        asset_content_type: application/gzip
    # upload macos archive asset
    - name: Upload MacOS Archive Asset
      id: upload-macos-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ../deploy/macos/SpriteSomething.tar.gz
        asset_name: SpriteSomething-${GITHUB_TAG}-osx.tar.gz
        asset_content_type: application/gzip
    # upload windows archive asset
    - name: Upload Windows Archive Asset
      id: upload-windows-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ../deploy/windows/SpriteSomething.zip
        asset_name: SpriteSomething-${GITHUB_TAG}-windows.zip
        asset_content_type: application/zip
#    - name: Create a Release
#      uses: ./.github/actions/softprops/action-gh-release
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        name: ${RELEASE_NAME}
#        draft: true
#        body: "Please see [RELEASENOTES.md](https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_TAG}/RELEASENOTES.md) for description."
#        body_path: ${GITHUB_WORKSPACE}/RELEASENOTES.md
#        files: ../deploy
    - name: Build Discord Notification Payload
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        python ./resources/ci/common/prepare_discord_notif.py
      if: contains(matrix.os-name, 'windows')

  # Prepare for Deployment to GitHub Pages
  #  run custom action
  prepare-pages:
    name: Prepare GHPages
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # pages on one OS
        os-name: [ windows-latest ]

    needs: [ deploy-release ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # download appversion artifact
    - name: Download AppVersion Artifact
      uses: actions/download-artifact@v1
      with:
        name: appversion-${{ matrix.os-name }}
        path: ../build
    # Prepare Pages
    - name: Prepare GitHub Pages
      run: |
        python ./resources/ci/common/prepare_pages.py
    # upload pages artifact for later step
    - name: Upload Pages Artifact
      uses: actions/upload-artifact@v1
      with:
        name: pages-${{ matrix.os-name }}
        path: ../pages

  # Deploy to GitHub Pages
  #
  deploy-pages:
    name: Deploy GHPages
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # pages on one OS
        os-name: [ windows-latest ]

    needs: [ prepare-pages ]
    steps:
    # checkout commit
    - name: Checkout commit
      uses: actions/checkout@v1
    # download pages artifact
    - name: Download Pages Artifact
      uses: actions/download-artifact@v1
      with:
        name: pages-${{ matrix.os-name }}
        path: ../pages
     # post to GHPages #FIXME: Test GHPages
#    - name: Post to GitHub Pages
#      uses: peaceiris/actions-gh-pages@v1.1.0
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        PUBLISH_BRANCH: gh-pages
#        PUBLISH_DIR: ../pages
